
// Сборка векторов
Функция ПолучитьВекторы(пСтрока1="", пСтрока2="")
	
	ДлинаСтроки1 = СтрДлина(пСтрока1);
	ДлинаСтроки2 = СтрДлина(пСтрока2);
	
	// Создаем таблицу для векторов
	Векторы = Новый ТаблицаЗначений;
	Векторы.Колонки.Добавить("НачальныйСимволХ");
	Векторы.Колонки.Добавить("НачальныйСимволУ");
	Векторы.Колонки.Добавить("КонечныйСимволХ");
	Векторы.Колонки.Добавить("КонечныйСимволУ");
	Векторы.Колонки.Добавить("ДлинаВектора");

	// Собираем векторы из точек
	Для Счетчик1 = 1 По ДлинаСтроки1 Цикл
		
		ТекущийСимвол1 = Сред(пСтрока1 ,Счетчик1, 1);
		
		Для Счетчик2 = 1 По ДлинаСтроки2 Цикл
			
			ТекущийСимвол2 = Сред(пСтрока2 ,Счетчик2, 1);

			Если ТекущийСимвол1 = ТекущийСимвол2 Тогда
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("КонечныйСимволХ", Счетчик1 - 1);
				СтруктураПоиска.Вставить("КонечныйСимволУ", Счетчик2 - 1);
				
				РезультатПоиска = Векторы.НайтиСтроки(СтруктураПоиска);
				Если РезультатПоиска.Количество() > 0 Тогда
					РезультатПоиска[0].Установить(2, Счетчик1);
					РезультатПоиска[0].Установить(3, Счетчик2);
					ДлинаВектора = РезультатПоиска[0].Получить(4);
					РезультатПоиска[0].Установить(4, ДлинаВектора + 1);
				Иначе
					НоваяСтрока = Векторы.Добавить();
					НоваяСтрока.НачальныйСимволХ = Счетчик1;
					НоваяСтрока.НачальныйСимволУ = Счетчик2;
					НоваяСтрока.КонечныйСимволХ = Счетчик1;
					НоваяСтрока.КонечныйСимволУ = Счетчик2;
					НоваяСтрока.ДлинаВектора = 1;
                КонецЕсли;
					
			КонецЕсли;	
			
		КонецЦикла;		
		
	КонецЦикла;	
				
	Возврат Векторы;	
КонецФункции

// Конкуренция векторов
Функция ОпределитьОтношенияВекторов(пНВ1Х, пКВ1Х, пНВ2Х, пКВ2Х, пНВ1У, пКВ1У, пНВ2У, пКВ2У)
	
	СтруктураВозврата = Новый Структура("ТипОтношений,ОбрезатьСлева,ОбрезатьСправа", 0, 0, 0);
	
	РасположениеНачалаХ = ?((пНВ1Х <= пНВ2Х) и (пНВ2Х <= пКВ1Х), Истина, Ложь);
	РасположениеКонцаХ = ?((пНВ1Х <= пКВ2Х) и (пКВ2Х <= пКВ1Х), Истина, Ложь);	
	РасположениеНачалаУ = ?((пНВ1У <= пНВ2У) и (пНВ2У <= пКВ1У), Истина, Ложь);
	РасположениеКонцаУ = ?((пНВ1У <= пКВ2У) и (пКВ2У <= пКВ1У), Истина, Ложь);
	
	Если ((РасположениеНачалаХ) и (РасположениеКонцаХ)) 
		или ((РасположениеНачалаУ) и (РасположениеКонцаУ)) Тогда
		
		// Второй вектор полностью вытеснен первым
		СтруктураВозврата.ТипОтношений = 2;
		
	ИначеЕсли (РасположениеНачалаХ) или (РасположениеНачалаУ) Тогда
		
		// Начало второго вектора вытеснено первым, обрезка второго вектора слева
		СтруктураВозврата.ТипОтношений = 1;
		СтруктураВозврата.ОбрезатьСлева = Макс(пКВ1Х - пНВ2Х + 1, пКВ1У - пНВ2У + 1);
		
	ИначеЕсли (РасположениеКонцаХ) или (РасположениеКонцаУ) Тогда 
		
		// Конец второго вектора вытеснен первым, обрезка второго вектора справа
		СтруктураВозврата.ТипОтношений = 1;
		СтруктураВозврата.ОбрезатьСправа = Макс(пКВ2Х - пНВ1Х + 1, пКВ2У - пНВ1У + 1);	
		
	КонецЕсли;	
	
	Возврат СтруктураВозврата;
	
КонецФункции	

Функция УпорядочитьКонкурирующиеВекторы(пВекторы)
	
	// Сортируем векторы по длине
	пВекторы.Сортировать("ДлинаВектора УБЫВ");	

	// Создаем таблицу для упорядоченных векторов
	УпорядоченныеВекторы = пВекторы.СкопироватьКолонки();
		
	// Упорядочиваем векторы
	КоличествоВекторов = пВекторы.Количество();	
	Для Счетчик1 = 1 По КоличествоВекторов Цикл
		
		Вектор   = пВекторы.Получить(Счетчик1 - 1);
		Вытеснен = Ложь;
		
		// Проверка вектора на вытеснение более сильными векторами
		КоличествоУпорядоченныхВекторов = УпорядоченныеВекторы.Количество();
		Для Счетчик2 = 1 По КоличествоУпорядоченныхВекторов Цикл
			
			УпорядоченныйВектор = УпорядоченныеВекторы.Получить(Счетчик2 - 1);
			ОтношенияВекторов = ОпределитьОтношенияВекторов(
				УпорядоченныйВектор.НачальныйСимволХ, 
				УпорядоченныйВектор.КонечныйСимволХ, 
				Вектор.НачальныйСимволХ, 
				Вектор.КонечныйСимволХ,
                УпорядоченныйВектор.НачальныйСимволУ, 
				УпорядоченныйВектор.КонечныйСимволУ, 
			    Вектор.НачальныйСимволУ, 
				Вектор.КонечныйСимволУ
				);
				
			Если ОтношенияВекторов.ТипОтношений = 2 Тогда	
				Вытеснен = Истина;
			ИначеЕсли ОтношенияВекторов.ТипОтношений = 1 Тогда
				
				// Уберем из вектора вытесненную часть
				Если ОтношенияВекторов.ОбрезатьСлева > 0 Тогда
					Вектор.Установить(0, Вектор.НачальныйСимволХ + ОтношенияВекторов.ОбрезатьСлева);
					Вектор.Установить(1, Вектор.НачальныйСимволУ + ОтношенияВекторов.ОбрезатьСлева);
					Вектор.Установить(4, Вектор.ДлинаВектора - ОтношенияВекторов.ОбрезатьСлева);
				ИначеЕсли ОтношенияВекторов.ОбрезатьСправа > 0 Тогда	
					Вектор.Установить(2, Вектор.КонечныйСимволХ - ОтношенияВекторов.ОбрезатьСправа);
					Вектор.Установить(3, Вектор.КонечныйСимволУ - ОтношенияВекторов.ОбрезатьСправа);
					Вектор.Установить(4, Вектор.ДлинаВектора - ОтношенияВекторов.ОбрезатьСправа);					
				КонецЕсли;	
					
	            // Отсортируем векторы по длине заново
	            пВекторы.Сортировать("ДлинаВектора УБЫВ");				
				
				// Подвинем счетчик на единицу назад
				Счетчик1 = Счетчик1 - 1;
				
				// Установим статус конкуренции в истину
				Вытеснен = Истина;
				
			Иначе	
				
				// Проверка текущего вектора на правильность
				Если ((Вектор.НачальныйСимволХ > УпорядоченныйВектор.НачальныйСимволХ)
					и (Вектор.НачальныйСимволУ < УпорядоченныйВектор.НачальныйСимволУ)) или 
					 ((Вектор.НачальныйСимволХ < УпорядоченныйВектор.НачальныйСимволХ)
					и (Вектор.НачальныйСимволУ > УпорядоченныйВектор.НачальныйСимволУ)) Тогда
			        Вытеснен = Истина;				
				КонецЕсли;				
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Пропускаем полностью конкурирующие векторы
		Если Вытеснен Тогда
			Продолжить;
		КонецЕсли;	
		
		// Добавление вектора в упорядоченные
		НоваяСтрока = УпорядоченныеВекторы.Добавить();
		НоваяСтрока.НачальныйСимволХ = Вектор.НачальныйСимволХ;
		НоваяСтрока.НачальныйСимволУ = Вектор.НачальныйСимволУ;
		НоваяСтрока.КонечныйСимволХ  = Вектор.КонечныйСимволХ;
		НоваяСтрока.КонечныйСимволУ  = Вектор.КонечныйСимволУ;
		НоваяСтрока.ДлинаВектора     = Вектор.ДлинаВектора;
		
	КонецЦикла;	
	
	Возврат УпорядоченныеВекторы;
КонецФункции	

Функция ПолучитьМеждувекторноеПространство(пСтрока1, пСтрока2, пПредыдущийВектор, пТекущийВектор, пПростоеПредставление = Ложь)
	
	Если (НЕ(пПредыдущийВектор = Неопределено)) и (НЕ(пТекущийВектор = Неопределено)) Тогда	
		НачалоМВП_1      = пПредыдущийВектор.КонечныйСимволХ + 1;
		КонецМВП_1       = пТекущийВектор.НачальныйСимволХ - 1;	
		НачалоМВП_2      = пПредыдущийВектор.КонечныйСимволУ + 1;
		КонецМВП_2       = пТекущийВектор.НачальныйСимволУ - 1;
	ИначеЕсли (НЕ(пТекущийВектор = Неопределено)) Тогда	
		НачалоМВП_1      = 1;
		КонецМВП_1       = пТекущийВектор.НачальныйСимволХ - 1;		
		НачалоМВП_2      = 1;
		КонецМВП_2       = пТекущийВектор.НачальныйСимволУ - 1;		
	ИначеЕсли (НЕ(пПредыдущийВектор = Неопределено)) Тогда
		НачалоМВП_1      = пПредыдущийВектор.КонечныйСимволХ + 1;
		КонецМВП_1       = СтрДлина(пСтрока1);
		НачалоМВП_2      = пПредыдущийВектор.КонечныйСимволУ + 1;
		КонецМВП_2       = СтрДлина(пСтрока2);	
	КонецЕсли;
	
	НачалоМВП_1 = ?(пПредыдущийВектор = Неопределено, 1, пПредыдущийВектор.КонечныйСимволХ + 1);
	КонецМВП_1  = ?(пТекущийВектор = Неопределено, СтрДлина(пСтрока1), пТекущийВектор.НачальныйСимволХ - 1);
	НачалоМВП_2 = ?(пПредыдущийВектор = Неопределено, 1, пПредыдущийВектор.КонечныйСимволУ + 1);
	КонецМВП_2  = ?(пТекущийВектор = Неопределено, СтрДлина(пСтрока2), пТекущийВектор.НачальныйСимволУ - 1);
	
	ДлинаПодстроки_1 = КонецМВП_1 - НачалоМВП_1 + 1;
    ДлинаПодстроки_2 = КонецМВП_2 - НачалоМВП_2 + 1;
	
	Если КонецМВП_1 >= НачалоМВП_1 Тогда
	    СодержаниеМВП_1 = Сред(пСтрока1, НачалоМВП_1, ДлинаПодстроки_1);
	Иначе
	    СодержаниеМВП_1 = "";
    КонецЕсли;

	Если КонецМВП_2 >= НачалоМВП_2 Тогда
		СодержаниеМВП_2 = Сред(пСтрока2, НачалоМВП_2, ДлинаПодстроки_2);	
	Иначе
		СодержаниеМВП_2 = "";
	КонецЕсли;	
	
	Если (ПустаяСтрока(СодержаниеМВП_1)) и (ПустаяСтрока(СодержаниеМВП_2)) Тогда
		Шаблон = "";
	Иначе	
		
		Если НЕ(пПростоеПредставление) Тогда
			Шаблон = "[" + СодержаниеМВП_1 + "|" + СодержаниеМВП_2 + "]";
		Иначе
			Шаблон = "*";
		КонецЕсли;	
		
	КонецЕсли;	
		
	Возврат Шаблон;	
	
КонецФункции

Функция ПостроитьШаблонПодобия(пСтрока1="", пСтрока2="", пПростоеПредставление = Ложь)
	
	// Определяем переменную шаблона
	Шаблон = "";
	
	// Собираем векторы из точек пересечения
	ВсеВекторы = ПолучитьВекторы(пСтрока1, пСтрока2);
	
	// Пропускаем векторы через процедуру конкуренции
	УпорядоченныеВекторы = УпорядочитьКонкурирующиеВекторы(ВсеВекторы);
	
	// Сортируем векторы в порядке их расположения в строках
	УпорядоченныеВекторы.Сортировать("НачальныйСимволХ ВОЗР");
	
	// Определяем векторы	
	ПредыдущийВектор = Неопределено;
	ТекущийВектор    = Неопределено;
	
	МаксимальноеЗначение = УпорядоченныеВекторы.Количество() + 1;
	Для Счетчик = 1 По МаксимальноеЗначение Цикл
		
		Если Счетчик < МаксимальноеЗначение Тогда
			
			// Получаем векторы
			ПредыдущийВектор = ТекущийВектор;
			ТекущийВектор    = УпорядоченныеВекторы.Получить(Счетчик - 1);
			
			// Получаем междувекторное пространство
			МВП = ПолучитьМеждувекторноеПространство(пСтрока1, пСтрока2, ПредыдущийВектор, ТекущийВектор, пПростоеПредставление);
			
			// Получаем вектор
			ДлинаПодстроки = ТекущийВектор.КонечныйСимволХ - ТекущийВектор.НачальныйСимволХ + 1; 
			Шаблон         = Шаблон + МВП + Сред(пСтрока1, ТекущийВектор.НачальныйСимволХ, ДлинаПодстроки);
			
		Иначе
			
			// Получаем векторы
			ПредыдущийВектор = ТекущийВектор;
			ТекущийВектор    = Неопределено;			
			
			// Получаем междувекторное пространство
			МВП    = ПолучитьМеждувекторноеПространство(пСтрока1, пСтрока2, ПредыдущийВектор, ТекущийВектор, пПростоеПредставление);			
			Шаблон = Шаблон + МВП;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат Шаблон;
		
КонецФункции	

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Результат = ПостроитьШаблонПодобия(Строка1, Строка2, ПростоеПредставление);
	
КонецПроцедуры

Процедура ПриОткрытии()
	ПростоеПредставление = Истина;
КонецПроцедуры
